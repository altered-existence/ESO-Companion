
ï»¿@layout LoginLayout
@page "/accountLoginPage"
@using ESOCompanion.Data

@using DataAccessLibrary.Services
@using DataAccessLibrary.SQLite
@using DataAccessLibrary.Models
@using ESOCompanion.Data
@inject AccountManager accounts
@inject IUserData userData


<h1 class="oi oi-circle-check"> Account Login Page</h1>
<h1 class="text-center">Welcome Back User</h1>
<div class="container align-items-center">
    <EditForm Model="@userData" OnValidSubmit="@SearchUsers">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="input-group mb-3">
            <div class="input-group-prepend">
                <span class="input-group-text" id="userName">User Name </span>
            </div>
            <InputText id="userName" @bind-Value="user.userName" />
        </div>

        <div class="input-group mb-3">
            <div class="input-group-prepend">
                <span class="input-group-text" id="userPassword">Password </span>
            </div>
            <InputText id="userPassword" @bind-Value="user.userPassword" />
        </div>
        <button class="btn btn-primary oi oi-plus" @onclick="Login"> Login</button>
        <button class="btn btn-primary oi oi-plus" @onclick="SearchUsers"> Search</button>
    </EditForm>
    <li class="nav-item px-3">
        <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
            <span class="oi oi-home" aria-hidden="true"></span> Home
        </NavLink>
    </li>
</div>

@code {
    UserModel user = new UserModel();
    public List<UserModel> users;

    protected override async Task OnInitializedAsync()
    {
        users = await userData.GetUsers();
    }
    private async Task Login()
    {
        UserModel userCheck = await userData.VerifyPassword(user.userName, user.userPassword);
        if(userCheck != null)
        {
            AppData.loadedUser = userCheck;
        }
        else
        {
            AppData.UnloadUser();
        }
    }
    //private async Task SearchUsers(UserModel user)
    //{
    //    // If user does exist, login, else return
    //    if (user.userName != "" && user.userPassword != "")
    //    {
    //        UserModel userCheck = await userData.SearchForUser(user.userName);
    //        if (userCheck != null)
    //        {
    //            AppData.loadedUser = await accounts.SearchUsers(user, userCheck);
    //        }
    //    }
    //    else
    //    {
    //        Console.WriteLine(user.userName + "User name & password required!");
    //        return;
    //    }
    //}
}
