@page "/settingsPage"
@using ESOCompanion.Data
@inject AppData app
@using DataAccessLibrary.Models
@using DataAccessLibrary.Utilities
@using DataAccessLibrary.SQLite

@inject ISQLiteDataAccess companionDB
@inject IUserData userData
@inject ICharacterData characterData
@inject IStyleData styleData
<h1 class="text-center"><img class="float-left" src="img/icon.png" width="64" height="64">Settings</h1>

<div class="container col-10">
    <div class="form-group">
        @*<form>
                <label class="form-label" for="toggleTheme">Toggle Theme:</label>
                <input type="checkbox" class="form-control-file" id="toggleTheme">

                <label class="form-label" for="databaseFile">Select Database File</label>
                <input type="file" class="form-control-file" id="databaseFile" >

                <label class="form-label" for="addonsFolder">Select AddOns Folder</label>
                <input type="file" class="form-control-file" id="addonsFolder">

                <AuthorizeView>
                    <Authorized>
                        @if (AppData.Role == "Admin")
                        {
                            <div class="container align-self-auto" style="padding-bottom:4em">
                                <button class="btn btn-danger" style="padding:2px" @onclick="CleanDatabase">Clean Database</button>
                            </div>

                            <div class="container align-self-auto" style="padding-bottom:4em">
                                <button class="btn btn-danger" style="padding:2px" @onclick="CleanUserTable">Purge Users</button>
                            </div>
                        }
                        else if (AppData.Role == null)
                        {
                            <div class="container align-self-auto" style="padding-bottom:4em">
                                <button class="btn btn-danger" style="padding:2px" @onclick="CreateNewDatabase">Create New Database</button>
                            </div>
                        }
                    </Authorized>
                    <NotAuthorized>

                    </NotAuthorized>
                </AuthorizeView>
            </form>*@
        <EditForm Model="@dataFileModel" OnValidSubmit="@UserDatabaseSelect">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="input-group mb-3">
                <div class="input-group-prepend">
                    <span class="input-group-text" id="path">Database Directory </span>
                </div>
                <InputText id="path" @bind-Value="dataFileModel.Path" />
            </div>
            <div class="input-group mb-3">
                <div class="input-group-prepend">
                    <span class="input-group-text" id="fileName">Name of Database </span>
                </div>
                <InputText id="fileName" @bind-Value="dataFileModel.FileName" />
            </div>
            <div class="container align-self-auto" style="padding-bottom:4em">
                <button class="btn btn-danger" style="padding:2px" @onclick="UserDatabaseSelect">Create New Database </button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    static string path;
    static string fileName;
    DataFileModel dataFileModel = new DataFileModel(path, fileName);
    public void onAddonsFolderSelect(string addonsPath)
    {

    }
    private void CreateNewDatabase()
    {
        companionDB.CreateDatabaseAndTable(companionDB.connectionString, true);
    }
    private void UserDatabaseSelect()
    {
        app.DataFile = dataFileModel;
        onDatabaseFileSelect();
        companionDB.CreateDatabaseAndTable(companionDB.UserConnectionString + path + fileName + AppData.defaultDatabasePathSuffix, true);

    }
    private void onDatabaseFileSelect()
    {
        path = dataFileModel.Path;
        fileName = dataFileModel.FileName;
    }
    private void CleanDatabase()
    {

        characterData.ClearTable();
        styleData.ClearTable();
        characterData.CreateCharactersTable();
        styleData.CreateStylesTable();
    }
    public void CleanUserTable()
    {
        userData.ClearTable();
        userData.CreateUsersTable();
    }
}