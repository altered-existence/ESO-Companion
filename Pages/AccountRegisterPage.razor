@page "/accountRegisterPage"
@using ESOCompanion.Data
@using DataAccessLibrary.Services
@using DataAccessLibrary.SQLite
@using DataAccessLibrary.Models
@inject AccountManager accounts
@inject IUserData userData
@if (users == null)
{
    <h1 class="text-center">LOADING...</h1>
}
<h1 class="oi oi-circle-check"> Account Register Page</h1>
<h1 class="text-center">Welcome Noob User</h1>
<div class="container">
    <EditForm Model="@userData" OnValidSubmit="@InsertUser">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="input-group mb-3">
            <div class="input-group-prepend">
                <span class="input-group-text" id="userName">User Name </span>
            </div>
            <InputText id="userName" @bind-Value="user.userName" />
        </div>
        <div class="input-group mb-3">
            <div class="input-group-prepend">
                <span class="input-group-text" id="userEmail">Email </span>
            </div>
            <InputText id="userEmail" @bind-Value="user.userEmail" />
        </div>
        <div class="input-group mb-3">
            <div class="input-group-prepend">
                <span class="input-group-text" id="userPassword">Password </span>
            </div>
            <InputText id="userPassword" @bind-Value="user.userPassword" />
        </div>
        <button class="btn btn-primary oi oi-plus" @onclick="InsertUser"> Submit</button>
    </EditForm>
</div>

@code {
    UserModel user = new UserModel();
    public List<UserModel> users;
    protected override async Task OnInitializedAsync()
    {
        users = await userData.GetUsers();
    }
    private async Task UpdateUserEntries()
    {
        foreach (var user in users)
        {
            await userData.InsertUser(user);
        }
    }

    private async Task InsertUser()
    {
        // If user doesn't exist, create it, else return
        if (!users.Contains(user))
        { await userData.InsertUser(user); }
        else { return; }
    }
}
