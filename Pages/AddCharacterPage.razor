@page "/addCharacterPage"
@using ESOCompanion.Data
@using DataAccessLibrary.SQLite
@using DataAccessLibrary.Models
@inject ICharacterData _db
@inject IUserData userData

<h1 class="text-center">Add Character</h1>
<div class="container align-items-center">
    <EditForm Model="@character" OnValidSubmit="@InsertCharacter">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="input-group mb-3">
            <div class="input-group-prepend">
                <span class="input-group-text" id="charName">Name </span>
            </div>
            <InputText id="charName" @bind-Value="character.charName" />
        </div>
        <div class="input-group mb-3">
            <div class="input-group-prepend">
                <span class="input-group-text" id="charLevel">Level </span>
            </div>
            <InputNumber id="charLevel" @bind-Value="character.charLevel" />
        </div>
        <div class="input-group mb-3">
            <div class="input-group-prepend">
                <span class="input-group-text" id="charRace">Race </span>
            </div>
            <InputText id="charRace" @bind-Value="character.charRace" />
        </div>
        <div class="input-group mb-3">
            <div class="input-group-prepend">
                <span class="input-group-text" id="charClass">Class </span>
            </div>
            <InputText id="charClass" @bind-Value="character.charClass" />
        </div>
        <button class="btn btn-primary oi oi-plus" @onclick="InsertCharacter"> Submit</button>
    </EditForm>
</div>
@code {
    UserModel user = AppData.loadedUser;

    CharacterModel character = new CharacterModel();
    public List<CharacterModel> characters;

    private async Task InsertCharacter()
    {
        characters = await _db.GetCharacters(user);
        // If character doesn't exist, create it, else return
        var model = await _db.SearchForCharacter(character.charName);
        if (model.charName == "new")
        {
            character.ID = user.ID;
            character.championPoints = 0;
            character.isCharacterChampionLevel = 0;
            await _db.InsertCharacter(character);
        }
        else
        {
            character.charName = "";
        }
    }
}